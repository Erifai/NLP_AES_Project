Doing: take all data as if it belongs to one large dataset, and do classification
Mega classification for:  dep  features
2267 2267 2267 2212
Distribution of labels: 
Counter({'B1': 890, 'A2': 875, 'B2': 374, 'A1': 86, 'C1': 42})
Printing results for: RandomForestClassifier(bootstrap=True, class_weight='balanced',
            criterion='gini', max_depth=None, max_features='auto',
            max_leaf_nodes=None, min_impurity_split=1e-07,
            min_samples_leaf=1, min_samples_split=2,
            min_weight_fraction_leaf=0.0, n_estimators=300, n_jobs=1,
            oob_score=False, random_state=1234, verbose=0,
            warm_start=False)CountVectorizer(analyzer='word', binary=False, decode_error='strict',
        dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',
        lowercase=True, max_df=1.0, max_features=None, min_df=10,
        ngram_range=(1, 5), preprocessor=None, stop_words=None,
        strip_accents=None, token_pattern='(?u)\\b\\w\\w+\\b',
        tokenizer=None, vocabulary=None)
13223
13223
[ 0.60262009  0.68558952  0.68421053  0.69736842  0.78854626  0.80973451
  0.8         0.81777778  0.64888889  0.65333333]
0.718806932314 0.703433722455
[[ 21  65   0   0   0   0]
 [ 10 766  97   2   0   0]
 [  0 246 555  89   0   0]
 [  0  13  74 287   0   0]
 [  0   0   2  40   0   0]
 [  0   0   0   0   0   0]]
Printing results for: LinearSVC(C=1.0, class_weight='balanced', dual=True, fit_intercept=True,
     intercept_scaling=1, loss='squared_hinge', max_iter=1000,
     multi_class='ovr', penalty='l2', random_state=1234, tol=0.0001,
     verbose=0)CountVectorizer(analyzer='word', binary=False, decode_error='strict',
        dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',
        lowercase=True, max_df=1.0, max_features=None, min_df=10,
        ngram_range=(1, 5), preprocessor=None, stop_words=None,
        strip_accents=None, token_pattern='(?u)\\b\\w\\w+\\b',
        tokenizer=None, vocabulary=None)
13223
13223
[ 0.5720524   0.59825328  0.53508772  0.62719298  0.74008811  0.71681416
  0.71555556  0.69333333  0.56444444  0.60888889]
0.637171086585 0.629110759638
[[ 16  64   6   0   0   0]
 [ 42 649 175   9   0   0]
 [  2 234 562  91   1   0]
 [  0  24 123 216  11   0]
 [  0   1   6  34   1   0]
 [  0   0   0   0   0   0]]
Printing results for: LogisticRegression(C=1.0, class_weight='balanced', dual=False,
          fit_intercept=True, intercept_scaling=1, max_iter=100,
          multi_class='ovr', n_jobs=1, penalty='l2', random_state=1234,
          solver='liblinear', tol=0.0001, verbose=0, warm_start=False)CountVectorizer(analyzer='word', binary=False, decode_error='strict',
        dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',
        lowercase=True, max_df=1.0, max_features=None, min_df=10,
        ngram_range=(1, 5), preprocessor=None, stop_words=None,
        strip_accents=None, token_pattern='(?u)\\b\\w\\w+\\b',
        tokenizer=None, vocabulary=None)
13223
13223
[ 0.58078603  0.61572052  0.53947368  0.6622807   0.77092511  0.73451327
  0.72        0.73333333  0.58666667  0.62222222]
0.656592154287 0.648347081354
[[ 16  66   4   0   0   0]
 [ 36 662 168   9   0   0]
 [  2 224 565  98   1   0]
 [  0  17 104 243  10   0]
 [  0   0   3  37   2   0]
 [  0   0   0   0   0   0]]
SAME LANG EVAL DONE FOR THIS LANG
